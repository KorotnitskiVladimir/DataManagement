namespace DataManagement.EF;

public class EFDemo
{
    public void Run()
    {
        
    }
}

/* EntityFramework
 * ORM фреймворк с расширенной функциональностью работы с БД
 *
 * Установка
 * - Ядро: Microsoft.EntityFrameworkCore
 * - Драйвер БД (в зависимости от СУБД): Microsoft.EntityFrameworkCore.SqlServer
 * - Инструментарий командной строки: Microsoft.EntityFrameworkCore.Tools
 *
 * Организация:
 * - DBContext - контекст данных, "образ" всей базы данных, объект, который содержит информацию о всех таблицах,
 * их связи и т.д.
 * - В зависимости от задач, работа с данными делится на%
 *  = Code First - когда БД еще нет и есть возможность начать с C# кода
 *  = Data First - когда БД уже существует и есть потребность создать ORM-объекты (Entities)
 * Далее считаем, что используется Code First
 * - Описываем ORM-объекты (Entities) и обозначаем их коллекции в DBContext. Связи между ними описываем в
 *  OnModelCreating().
 * - Задаем строку подключения к БД, на момент ее создания БД еще не существует. То есть строка подключения - к БД,
 * которая будет создана средствами EF. Передаем ее в контекст данных.
 * - Когда опись контекста выполнена создаем миграцию - промежуточный код для переноса контекста в настоящую БД
 * Используем консоль менеджера пакетов (PM Console) -> Tools -> Nuget ->
 * - Используем миграцию - переносим ее в БД
 *
 * - При необоходимости внесения изменений / дополнений
 * = вносим изменения в сущности / контексты (например, описываем дополнительную сущность, добавляем ее в DbSet)
 * = создаем миграцию Add-Migration Name
 * = применяем миграцию - update
 *
 * 
*/